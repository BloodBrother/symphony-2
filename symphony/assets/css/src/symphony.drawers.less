/**
 * Symphony Drawers
 *
 * Drawers are areas in the backend that contain additional information
 * like settings or documentation. They are hidden by default and can be
 * expanded on click.
 *
 * @since Symphony 2.3
 */

/*-----------------------------------------------------------------------------
	LESS â€” Variables Importing
-----------------------------------------------------------------------------*/

@import "variables";

/*-----------------------------------------------------------------------------
	Horizontal drawers
-----------------------------------------------------------------------------*/

div.drawer.horizontal {
	// box-sizing: border-box;
	// position: absolute;
	// right: 0;
	// top: 100%;
	// background: var(--color-clear);
	// width: 80rem;
	max-width: 100%;
	flex: 100% 0 0;
	// box-shadow: var(--shadow);

	.contents {
		// padding: var(--spacing-broad) var(--spacing-broad) var(--spacing-broadest);
	}
}

/*-----------------------------------------------------------------------------
	Vertical drawers
-----------------------------------------------------------------------------*/

#contents {
	div.drawer {
		&:not(.horizontal) {
			.transitioned(~'transform');
			overflow: scroll;
			-webkit-overflow-scrolling: touch;
			position: absolute;
			top: 0;
			bottom: 0;
			background: var(--sidebar-background-color);
			width: var(--dimension-tinier);
			max-width: 100%;
			z-index: 1;
			// box-shadow: var(--shadow);

			.contents {
				padding: 0 0 var(--spacing-broadest);
			}
		}

		.close-btn {
			position: absolute;
			right: var(--spacing-broad);
			top: auto;
		}

		&.vertical-left {
			left: 0;
			border-right: 1px solid var(--color-main-light);
			transform: translateX(-100%);

			&.opened {
				transform: none;
			}
		}

		&.vertical-right {
			right: var(--spacing-broader);
			// transform: ~'translateX(calc(100% + var(--spacing-broader)))';
			overflow-x: hidden;
			overflow-y: auto;
			width: var(--sidebar-width);
			border-radius: var(--radius-duller);
			padding-top: var(--spacing-large);

			&:not(.opened) {
				opacity: 0;
				pointer-events: none;
			}
		}
	}
}
